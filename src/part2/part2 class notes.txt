Java Bootcamp Day02

Review Topics:
        17. OOP Inheritance
        18. Method Overriding
        19. Final keyword
        20. OOP Abstraction
        21. Abstract Class vs Interface
        22. OOP Polymorphism
        23. Reference Type Castings: Upcasting vs DownCasting
        24. Exceptions: checked & unchecked
        25. Exception Handling
        26. final vs finally vs finalize
        27. garbage collection & garbage collector
        28. Collections: List, Set, Queue
        29. Iterable & Iterator
        30. Maps



17. OOP Inheritance: Is A relation (super/sub  or  parent/child)
                     
                     less codes
                     reusability
                     organized
                     less memory
                     Centralize structure
                     easy to maintain


             sub (child) class: inherits all the variabels and methods from the super class

             super (parent) class: does not inherit anything. ONLY contains common features of all sub classes


             extends
             implements

             this()
             super()

             super.

        In my framework:

                BasePage: parent of all the pages classes  (Junit)

                        common web elements

                        public BasePage(){
                                initElement
                        }




                TestBase: parent of all the test classes for @Test methods  (TestNG)

                        @BeforeMethod{
                                open browser
                                maxmize browser
                                implicitwait
                                nevigate to URL
                        }

                        @AfterMethod{
                                close browser
                        }



                TestClass1 extends TestBase

                TestClass2 extends TestBase

                ....



18. Method Overriding: giving different implementatiosn to the methods
                        Must happen in sub class
                        Returntype, parameters, method name must be same
                        Access modifier needs to be same of more visible

                        private, static, final methods can not be overriden


                        toString()

                        get()
                        takeScreenshot()
                        executeScript()


19. Final keyword: unchangable
        
        methods: can not be overriden

        variables: can not be re-assigned

        class: can not be inherited



20 & 21. OOP Abstraction: hiding the implementation
                     focus on essentials, not to worry about small details

                     abstract methods: method without the body
                                       implementation of the method will be given when its overriden

                     2 ways:
                        1. Abstract class: meant to be a parent class (for common feature of all classes)
                                                can not create object


                        2. Interface:  used for providing additional methods
                                        implements

                                        can not create object

                                        variable: variables are static and final by default

                                        methods: abstract, static,  default methods


                In my framework: 

                        abstarct class: BasePage

                        interface: 
                                Map, List, Set....
                                WebDriver, JavScriptExecuter....



22. OOP Polymorphism: object taking on Multiple forms
                
                        Parent type (class/interface) being reference to child type



come back 1:40 pm










